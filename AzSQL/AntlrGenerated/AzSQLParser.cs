//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AzSQL.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class AzSQLParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, COMPARISON_OP=4, STRING_LITERAL=5, NUMERIC_LITERAL=6, 
		BOOLEAN_LITERAL=7, K_SELECT=8, K_WHERE=9, K_FROM=10, K_AND=11, K_OR=12, 
		K_NOT=13, TRUE=14, FALSE=15, COMMA=16, ORDER=17, GROUP=18, BY=19, ID=20, 
		NEGATION=21, SINGLE_LINE_COMMENT=22, MULTILINE_COMMENT=23, SPACES=24;
	public const int
		RULE_stat = 0, RULE_select_clause = 1, RULE_column_list = 2, RULE_column_name = 3, 
		RULE_table_name = 4, RULE_where_clause = 5, RULE_expr = 6, RULE_literal = 7;
	public static readonly string[] ruleNames = {
		"stat", "select_clause", "column_list", "column_name", "table_name", "where_clause", 
		"expr", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*'", "'('", "')'", null, null, null, null, null, null, null, null, 
		null, null, null, null, "','", "'order'", "'group'", "'by'", null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "COMPARISON_OP", "STRING_LITERAL", "NUMERIC_LITERAL", 
		"BOOLEAN_LITERAL", "K_SELECT", "K_WHERE", "K_FROM", "K_AND", "K_OR", "K_NOT", 
		"TRUE", "FALSE", "COMMA", "ORDER", "GROUP", "BY", "ID", "NEGATION", "SINGLE_LINE_COMMENT", 
		"MULTILINE_COMMENT", "SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AzSQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AzSQLParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StatContext : ParserRuleContext {
		public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 0, RULE_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; select_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(AzSQLParser.K_SELECT, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public ITerminalNode K_FROM() { return GetToken(AzSQLParser.K_FROM, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 2, RULE_select_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; Match(K_SELECT);
			State = 19; column_list();
			State = 20; Match(K_FROM);
			State = 21; table_name();
			State = 23;
			_la = TokenStream.La(1);
			if (_la==K_WHERE) {
				{
				State = 22; where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_listContext : ParserRuleContext {
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(AzSQLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(AzSQLParser.COMMA, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterColumn_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitColumn_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_listContext column_list() {
		Column_listContext _localctx = new Column_listContext(Context, State);
		EnterRule(_localctx, 4, RULE_column_list);
		int _la;
		try {
			State = 34;
			switch (TokenStream.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25; Match(T__0);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26; column_name();
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 27; Match(COMMA);
					State = 28; column_name();
					}
					}
					State = 33;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(AzSQLParser.ID, 0); }
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 6, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(AzSQLParser.ID, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode K_WHERE() { return GetToken(AzSQLParser.K_WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(K_WHERE);
			State = 41; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotExprContext : ExprContext {
		public ITerminalNode K_NOT() { return GetToken(AzSQLParser.K_NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParanthesizedExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParanthesizedExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterParanthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitParanthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParanthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_OR() { return GetToken(AzSQLParser.K_OR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BaseComparisonContext : ExprContext {
		public ITerminalNode ID() { return GetToken(AzSQLParser.ID, 0); }
		public ITerminalNode COMPARISON_OP() { return GetToken(AzSQLParser.COMPARISON_OP, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode NEGATION() { return GetToken(AzSQLParser.NEGATION, 0); }
		public BaseComparisonContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterBaseComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitBaseComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_AND() { return GetToken(AzSQLParser.K_AND, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			switch (TokenStream.La(1)) {
			case K_NOT:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 44; Match(K_NOT);
				State = 45; expr(5);
				}
				break;
			case ID:
				{
				_localctx = new BaseComparisonContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 46; Match(ID);
				State = 47; Match(COMPARISON_OP);
				State = 49;
				_la = TokenStream.La(1);
				if (_la==NEGATION) {
					{
					State = 48; Match(NEGATION);
					}
				}

				State = 51; literal();
				}
				break;
			case T__1:
				{
				_localctx = new ParanthesizedExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 52; Match(T__1);
				State = 53; expr(0);
				State = 54; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 66;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 64;
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 58;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 59; Match(K_AND);
						State = 60; expr(4);
						}
						break;
					case 2:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 61;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 62; Match(K_OR);
						State = 63; expr(3);
						}
						break;
					}
					} 
				}
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(AzSQLParser.STRING_LITERAL, 0); }
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(AzSQLParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode BOOLEAN_LITERAL() { return GetToken(AzSQLParser.BOOLEAN_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAzSQLListener typedListener = listener as IAzSQLListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAzSQLVisitor<TResult> typedVisitor = visitor as IAzSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 14, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LITERAL) | (1L << NUMERIC_LITERAL) | (1L << BOOLEAN_LITERAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1AJ\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x1A\n\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\a\x4 \n\x4\f\x4\xE\x4#\v\x4\x5\x4%\n\x4\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x34\n\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x5\b;\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\b\x43\n"+
		"\b\f\b\xE\b\x46\v\b\x3\t\x3\t\x3\t\x2\x3\xE\n\x2\x4\x6\b\n\f\xE\x10\x2"+
		"\x3\x3\x2\a\tI\x2\x12\x3\x2\x2\x2\x4\x14\x3\x2\x2\x2\x6$\x3\x2\x2\x2\b"+
		"&\x3\x2\x2\x2\n(\x3\x2\x2\x2\f*\x3\x2\x2\x2\xE:\x3\x2\x2\x2\x10G\x3\x2"+
		"\x2\x2\x12\x13\x5\x4\x3\x2\x13\x3\x3\x2\x2\x2\x14\x15\a\n\x2\x2\x15\x16"+
		"\x5\x6\x4\x2\x16\x17\a\f\x2\x2\x17\x19\x5\n\x6\x2\x18\x1A\x5\f\a\x2\x19"+
		"\x18\x3\x2\x2\x2\x19\x1A\x3\x2\x2\x2\x1A\x5\x3\x2\x2\x2\x1B%\a\x3\x2\x2"+
		"\x1C!\x5\b\x5\x2\x1D\x1E\a\x12\x2\x2\x1E \x5\b\x5\x2\x1F\x1D\x3\x2\x2"+
		"\x2 #\x3\x2\x2\x2!\x1F\x3\x2\x2\x2!\"\x3\x2\x2\x2\"%\x3\x2\x2\x2#!\x3"+
		"\x2\x2\x2$\x1B\x3\x2\x2\x2$\x1C\x3\x2\x2\x2%\a\x3\x2\x2\x2&\'\a\x16\x2"+
		"\x2\'\t\x3\x2\x2\x2()\a\x16\x2\x2)\v\x3\x2\x2\x2*+\a\v\x2\x2+,\x5\xE\b"+
		"\x2,\r\x3\x2\x2\x2-.\b\b\x1\x2./\a\xF\x2\x2/;\x5\xE\b\a\x30\x31\a\x16"+
		"\x2\x2\x31\x33\a\x6\x2\x2\x32\x34\a\x17\x2\x2\x33\x32\x3\x2\x2\x2\x33"+
		"\x34\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35;\x5\x10\t\x2\x36\x37\a\x4\x2"+
		"\x2\x37\x38\x5\xE\b\x2\x38\x39\a\x5\x2\x2\x39;\x3\x2\x2\x2:-\x3\x2\x2"+
		"\x2:\x30\x3\x2\x2\x2:\x36\x3\x2\x2\x2;\x44\x3\x2\x2\x2<=\f\x5\x2\x2=>"+
		"\a\r\x2\x2>\x43\x5\xE\b\x6?@\f\x4\x2\x2@\x41\a\xE\x2\x2\x41\x43\x5\xE"+
		"\b\x5\x42<\x3\x2\x2\x2\x42?\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42\x3"+
		"\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\xF\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2G"+
		"H\t\x2\x2\x2H\x11\x3\x2\x2\x2\t\x19!$\x33:\x42\x44";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
